{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import*as LocalStorage from'../utils/localStorage';// Function to get the correct WebSocket URL based on environment\nexport const getWebSocketUrl=()=>{// For local development\nif(process.env.NODE_ENV==='development'){return'ws://localhost:3001/ws';}// For production (Vercel)\nconst protocol=window.location.protocol==='https:'?'wss':'ws';return`${protocol}://${window.location.host}/ws`;};export const useWebSocket=url=>{// Use provided URL or get the default one based on environment\nconst wsUrl=url||getWebSocketUrl();const[ws,setWs]=useState(null);const[isConnected,setIsConnected]=useState(false);const[gameId,setGameId]=useState(()=>LocalStorage.getGameId());const[error,setError]=useState(null);const[players,setPlayers]=useState(()=>LocalStorage.getPlayers()||[]);const[isGameStarted,setIsGameStarted]=useState(()=>LocalStorage.getIsGameStarted());const[gameState,setGameState]=useState(()=>LocalStorage.getGameState());const[playerId,setPlayerId]=useState(()=>LocalStorage.getPlayerId());const[reconnectAttempt,setReconnectAttempt]=useState(0);const connect=useCallback(()=>{try{console.log('Attempting to connect to WebSocket server...',{existingGameId:gameId,existingPlayerId:playerId,isGameStarted});const websocket=new WebSocket(wsUrl);websocket.onopen=()=>{console.log('WebSocket connection established');setIsConnected(true);setError(null);setReconnectAttempt(0);// If we have a gameId and playerId, attempt to reconnect to the game\nif(gameId&&playerId&&isGameStarted){console.log('Attempting to reconnect to existing game:',{gameId,playerId});// Send a reconnect message to the server\nconst message=JSON.stringify({type:'RECONNECT',payload:{gameId,playerId}});websocket.send(message);}};websocket.onclose=event=>{console.log('WebSocket connection closed:',event);setIsConnected(false);// Attempt to reconnect if the game is in progress\nif(isGameStarted&&reconnectAttempt<3){console.log('Attempting to reconnect...',{attempt:reconnectAttempt+1});setTimeout(()=>{setReconnectAttempt(prev=>prev+1);connect();},1000*(reconnectAttempt+1));// Exponential backoff\n}};websocket.onerror=error=>{console.error('WebSocket error:',error);setError('Failed to connect to server');};websocket.onmessage=event=>{try{const message=JSON.parse(event.data);console.log('WebSocket received message:',{type:message.type,payload:message.payload,timestamp:new Date().toISOString()});handleMessage(message);}catch(error){console.error('Error handling message:',error);}};setWs(websocket);}catch(error){console.error('Error creating WebSocket connection:',error);setError('Failed to create WebSocket connection');}},[wsUrl,isGameStarted,reconnectAttempt,gameId,playerId]);useEffect(()=>{connect();return()=>{if(ws){ws.close();}};},[connect]);// Save game state to localStorage whenever relevant state changes\nuseEffect(()=>{if(gameId){LocalStorage.saveGameId(gameId);}},[gameId]);useEffect(()=>{if(playerId){LocalStorage.savePlayerId(playerId);}},[playerId]);useEffect(()=>{if(gameState){LocalStorage.saveGameState(gameState);}},[gameState]);useEffect(()=>{LocalStorage.saveIsGameStarted(isGameStarted);},[isGameStarted]);useEffect(()=>{if(players.length>0){LocalStorage.savePlayers(players);}},[players]);const handleMessage=message=>{console.log('Processing WebSocket message:',{type:message.type,payload:message.payload,currentPlayerId:playerId,currentGameId:gameId});switch(message.type){case'GAME_CREATED':console.log('Game created, setting player ID:',message.payload.playerId);setGameId(message.payload.gameId);setPlayerId(message.payload.playerId);setPlayers([{id:message.payload.playerId,name:message.payload.playerName}]);break;case'GAME_JOINED':console.log('Game joined, setting player ID and game ID:',{playerId:message.payload.playerId,gameId:message.payload.gameId});setGameId(message.payload.gameId);setPlayerId(message.payload.playerId);setPlayers(message.payload.players);break;case'PLAYER_JOINED':console.log('Player joined, updating players list and ensuring gameId is set:',{players:message.payload.players,gameId:message.payload.gameId,currentGameId:gameId});// Make sure gameId is set if available\nif(message.payload.gameId&&!gameId){setGameId(message.payload.gameId);}setPlayers(message.payload.players);break;case'GAME_STARTED':console.log('Game started, current player ID and game ID:',{playerId,gameId:message.payload.gameId||gameId});// Ensure gameId is set if available\nif(message.payload.gameId&&!gameId){setGameId(message.payload.gameId);}setIsGameStarted(true);setGameState(message.payload.gameState);setPlayers(message.payload.players);// Ensure we have the correct player ID\nif(message.payload.playerId){console.log('Setting player ID from game start:',message.payload.playerId);setPlayerId(message.payload.playerId);}break;case'GAME_STATE_UPDATED':setGameState(message.payload.gameState);// Ensure gameId is set if available\nif(message.payload.gameId&&!gameId){console.log('Setting gameId from game state update:',message.payload.gameId);setGameId(message.payload.gameId);}break;case'RECONNECT_SUCCESS':console.log('Reconnection successful:',message.payload);// Update all game state with the received data\nsetGameId(message.payload.gameId);setPlayerId(message.payload.playerId);setPlayers(message.payload.players);setIsGameStarted(true);setGameState(message.payload.gameState);break;case'ERROR':console.error('Server error:',message.payload.message,{currentPlayerId:playerId,currentGameId:gameId});setError(message.payload.message);break;default:console.warn('Unknown message type:',message.type);}};const sendMessage=useCallback((type,payload)=>{console.log('Preparing to send message:',{type,payload,currentPlayerId:playerId,currentGameId:gameId});if(!ws){console.error('No WebSocket instance available');setError('No connection available');return;}if(ws.readyState!==WebSocket.OPEN){console.error('WebSocket not in OPEN state:',{readyState:ws.readyState,readyStateString:['CONNECTING','OPEN','CLOSING','CLOSED'][ws.readyState],isConnected});setError('Connection not ready');return;}try{// We no longer need to add playerId to MAKE_MOVE messages\n// The server identifies players by their WebSocket connection\nconst message=JSON.stringify({type,payload});console.log('Sending WebSocket message:',{type,payload,currentPlayerId:playerId,// for debugging only\ntimestamp:new Date().toISOString()});ws.send(message);}catch(error){console.error('Error sending message:',error);setError('Failed to send message');}},[ws,isConnected,playerId,gameId]);return{sendMessage,gameId,error,isConnected,players,isGameStarted,gameState,playerId};};","map":{"version":3,"names":["useState","useEffect","useCallback","LocalStorage","getWebSocketUrl","process","env","NODE_ENV","protocol","window","location","host","useWebSocket","url","wsUrl","ws","setWs","isConnected","setIsConnected","gameId","setGameId","getGameId","error","setError","players","setPlayers","getPlayers","isGameStarted","setIsGameStarted","getIsGameStarted","gameState","setGameState","getGameState","playerId","setPlayerId","getPlayerId","reconnectAttempt","setReconnectAttempt","connect","console","log","existingGameId","existingPlayerId","websocket","WebSocket","onopen","message","JSON","stringify","type","payload","send","onclose","event","attempt","setTimeout","prev","onerror","onmessage","parse","data","timestamp","Date","toISOString","handleMessage","close","saveGameId","savePlayerId","saveGameState","saveIsGameStarted","length","savePlayers","currentPlayerId","currentGameId","id","name","playerName","warn","sendMessage","readyState","OPEN","readyStateString"],"sources":["/Users/samjain/seq/sequence/src/hooks/useWebSocket.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { WebSocketMessage } from '../server/types';\nimport { GameState } from '../models/types';\nimport * as LocalStorage from '../utils/localStorage';\n\n// Function to get the correct WebSocket URL based on environment\nexport const getWebSocketUrl = (): string => {\n  // For local development\n  if (process.env.NODE_ENV === 'development') {\n    return 'ws://localhost:3001/ws';\n  }\n  \n  // For production (Vercel)\n  const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n  return `${protocol}://${window.location.host}/ws`;\n};\n\ninterface UseWebSocketReturn {\n  sendMessage: (type: string, payload: any) => void;\n  gameId: string | null;\n  error: string | null;\n  isConnected: boolean;\n  players: { id: string; name: string }[];\n  isGameStarted: boolean;\n  gameState: GameState | null;\n  playerId: string | null;\n}\n\nexport const useWebSocket = (url?: string): UseWebSocketReturn => {\n  // Use provided URL or get the default one based on environment\n  const wsUrl = url || getWebSocketUrl();\n  const [ws, setWs] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [gameId, setGameId] = useState<string | null>(() => LocalStorage.getGameId());\n  const [error, setError] = useState<string | null>(null);\n  const [players, setPlayers] = useState<{ id: string; name: string }[]>(() => LocalStorage.getPlayers() || []);\n  const [isGameStarted, setIsGameStarted] = useState<boolean>(() => LocalStorage.getIsGameStarted());\n  const [gameState, setGameState] = useState<GameState | null>(() => LocalStorage.getGameState());\n  const [playerId, setPlayerId] = useState<string | null>(() => LocalStorage.getPlayerId());\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n\n  const connect = useCallback(() => {\n    try {\n      console.log('Attempting to connect to WebSocket server...', {\n        existingGameId: gameId,\n        existingPlayerId: playerId,\n        isGameStarted\n      });\n      \n      const websocket = new WebSocket(wsUrl);\n\n      websocket.onopen = () => {\n        console.log('WebSocket connection established');\n        setIsConnected(true);\n        setError(null);\n        setReconnectAttempt(0);\n        \n        // If we have a gameId and playerId, attempt to reconnect to the game\n        if (gameId && playerId && isGameStarted) {\n          console.log('Attempting to reconnect to existing game:', {\n            gameId,\n            playerId\n          });\n          \n          // Send a reconnect message to the server\n          const message = JSON.stringify({\n            type: 'RECONNECT',\n            payload: {\n              gameId,\n              playerId\n            }\n          });\n          websocket.send(message);\n        }\n      };\n\n      websocket.onclose = (event) => {\n        console.log('WebSocket connection closed:', event);\n        setIsConnected(false);\n        \n        // Attempt to reconnect if the game is in progress\n        if (isGameStarted && reconnectAttempt < 3) {\n          console.log('Attempting to reconnect...', { attempt: reconnectAttempt + 1 });\n          setTimeout(() => {\n            setReconnectAttempt(prev => prev + 1);\n            connect();\n          }, 1000 * (reconnectAttempt + 1)); // Exponential backoff\n        }\n      };\n\n      websocket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setError('Failed to connect to server');\n      };\n\n      websocket.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          console.log('WebSocket received message:', {\n            type: message.type,\n            payload: message.payload,\n            timestamp: new Date().toISOString()\n          });\n          handleMessage(message);\n        } catch (error) {\n          console.error('Error handling message:', error);\n        }\n      };\n\n      setWs(websocket);\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n      setError('Failed to create WebSocket connection');\n    }\n  }, [wsUrl, isGameStarted, reconnectAttempt, gameId, playerId]);\n\n  useEffect(() => {\n    connect();\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, [connect]);\n\n  // Save game state to localStorage whenever relevant state changes\n  useEffect(() => {\n    if (gameId) {\n      LocalStorage.saveGameId(gameId);\n    }\n  }, [gameId]);\n\n  useEffect(() => {\n    if (playerId) {\n      LocalStorage.savePlayerId(playerId);\n    }\n  }, [playerId]);\n\n  useEffect(() => {\n    if (gameState) {\n      LocalStorage.saveGameState(gameState);\n    }\n  }, [gameState]);\n\n  useEffect(() => {\n    LocalStorage.saveIsGameStarted(isGameStarted);\n  }, [isGameStarted]);\n\n  useEffect(() => {\n    if (players.length > 0) {\n      LocalStorage.savePlayers(players);\n    }\n  }, [players]);\n\n  const handleMessage = (message: WebSocketMessage) => {\n    console.log('Processing WebSocket message:', {\n      type: message.type,\n      payload: message.payload,\n      currentPlayerId: playerId,\n      currentGameId: gameId\n    });\n    \n    switch (message.type) {\n      case 'GAME_CREATED':\n        console.log('Game created, setting player ID:', message.payload.playerId);\n        setGameId(message.payload.gameId);\n        setPlayerId(message.payload.playerId);\n        setPlayers([{ id: message.payload.playerId, name: message.payload.playerName }]);\n        break;\n\n      case 'GAME_JOINED':\n        console.log('Game joined, setting player ID and game ID:', {\n          playerId: message.payload.playerId,\n          gameId: message.payload.gameId\n        });\n        setGameId(message.payload.gameId);\n        setPlayerId(message.payload.playerId);\n        setPlayers(message.payload.players);\n        break;\n\n      case 'PLAYER_JOINED':\n        console.log('Player joined, updating players list and ensuring gameId is set:', {\n          players: message.payload.players,\n          gameId: message.payload.gameId,\n          currentGameId: gameId\n        });\n        \n        // Make sure gameId is set if available\n        if (message.payload.gameId && !gameId) {\n          setGameId(message.payload.gameId);\n        }\n        \n        setPlayers(message.payload.players);\n        break;\n\n      case 'GAME_STARTED':\n        console.log('Game started, current player ID and game ID:', {\n          playerId,\n          gameId: message.payload.gameId || gameId\n        });\n        \n        // Ensure gameId is set if available\n        if (message.payload.gameId && !gameId) {\n          setGameId(message.payload.gameId);\n        }\n        \n        setIsGameStarted(true);\n        setGameState(message.payload.gameState);\n        setPlayers(message.payload.players);\n        \n        // Ensure we have the correct player ID\n        if (message.payload.playerId) {\n          console.log('Setting player ID from game start:', message.payload.playerId);\n          setPlayerId(message.payload.playerId);\n        }\n        break;\n\n      case 'GAME_STATE_UPDATED':\n        setGameState(message.payload.gameState);\n        \n        // Ensure gameId is set if available\n        if (message.payload.gameId && !gameId) {\n          console.log('Setting gameId from game state update:', message.payload.gameId);\n          setGameId(message.payload.gameId);\n        }\n        break;\n\n      case 'RECONNECT_SUCCESS':\n        console.log('Reconnection successful:', message.payload);\n        \n        // Update all game state with the received data\n        setGameId(message.payload.gameId);\n        setPlayerId(message.payload.playerId);\n        setPlayers(message.payload.players);\n        setIsGameStarted(true);\n        setGameState(message.payload.gameState);\n        break;\n\n      case 'ERROR':\n        console.error('Server error:', message.payload.message, {\n          currentPlayerId: playerId,\n          currentGameId: gameId\n        });\n        setError(message.payload.message);\n        break;\n\n      default:\n        console.warn('Unknown message type:', message.type);\n    }\n  };\n\n  const sendMessage = useCallback((type: string, payload: any) => {\n    console.log('Preparing to send message:', { \n      type, \n      payload,\n      currentPlayerId: playerId,\n      currentGameId: gameId\n    });\n    \n    if (!ws) {\n      console.error('No WebSocket instance available');\n      setError('No connection available');\n      return;\n    }\n\n    if (ws.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket not in OPEN state:', {\n        readyState: ws.readyState,\n        readyStateString: ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'][ws.readyState],\n        isConnected\n      });\n      setError('Connection not ready');\n      return;\n    }\n\n    try {\n      // We no longer need to add playerId to MAKE_MOVE messages\n      // The server identifies players by their WebSocket connection\n      \n      const message = JSON.stringify({ type, payload });\n      console.log('Sending WebSocket message:', {\n        type,\n        payload,\n        currentPlayerId: playerId, // for debugging only\n        timestamp: new Date().toISOString()\n      });\n      ws.send(message);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message');\n    }\n  }, [ws, isConnected, playerId, gameId]);\n\n  return {\n    sendMessage,\n    gameId,\n    error,\n    isConnected,\n    players,\n    isGameStarted,\n    gameState,\n    playerId\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}