{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport * as LocalStorage from '../utils/localStorage';\n\n// Function to get the correct WebSocket URL based on environment\nexport const getWebSocketUrl = () => {\n  // For local development\n  if (process.env.NODE_ENV === 'development') {\n    return 'ws://localhost:3001/ws';\n  }\n\n  // For production (Vercel)\n  const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n  return `${protocol}://${window.location.host}/ws`;\n};\nexport const useWebSocket = url => {\n  _s();\n  // Use provided URL or get the default one based on environment\n  const wsUrl = url || getWebSocketUrl();\n  const [ws, setWs] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [gameId, setGameId] = useState(() => LocalStorage.getGameId());\n  const [error, setError] = useState(null);\n  const [players, setPlayers] = useState(() => LocalStorage.getPlayers() || []);\n  const [isGameStarted, setIsGameStarted] = useState(() => LocalStorage.getIsGameStarted());\n  const [gameState, setGameState] = useState(() => LocalStorage.getGameState());\n  const [playerId, setPlayerId] = useState(() => LocalStorage.getPlayerId());\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const connect = useCallback(() => {\n    try {\n      console.log('Attempting to connect to WebSocket server...', {\n        existingGameId: gameId,\n        existingPlayerId: playerId,\n        isGameStarted\n      });\n      const websocket = new WebSocket(wsUrl);\n      websocket.onopen = () => {\n        console.log('WebSocket connection established');\n        setIsConnected(true);\n        setError(null);\n        setReconnectAttempt(0);\n\n        // If we have a gameId and playerId, attempt to reconnect to the game\n        if (gameId && playerId && isGameStarted) {\n          console.log('Attempting to reconnect to existing game:', {\n            gameId,\n            playerId\n          });\n\n          // Send a reconnect message to the server\n          const message = JSON.stringify({\n            type: 'RECONNECT',\n            payload: {\n              gameId,\n              playerId\n            }\n          });\n          websocket.send(message);\n        }\n      };\n      websocket.onclose = event => {\n        console.log('WebSocket connection closed:', event);\n        setIsConnected(false);\n\n        // Attempt to reconnect if the game is in progress\n        if (isGameStarted && reconnectAttempt < 3) {\n          console.log('Attempting to reconnect...', {\n            attempt: reconnectAttempt + 1\n          });\n          setTimeout(() => {\n            setReconnectAttempt(prev => prev + 1);\n            connect();\n          }, 1000 * (reconnectAttempt + 1)); // Exponential backoff\n        }\n      };\n      websocket.onerror = error => {\n        console.error('WebSocket error:', error);\n        setError('Failed to connect to server');\n      };\n      websocket.onmessage = event => {\n        try {\n          const message = JSON.parse(event.data);\n          console.log('WebSocket received message:', {\n            type: message.type,\n            payload: message.payload,\n            timestamp: new Date().toISOString()\n          });\n          handleMessage(message);\n        } catch (error) {\n          console.error('Error handling message:', error);\n        }\n      };\n      setWs(websocket);\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n      setError('Failed to create WebSocket connection');\n    }\n  }, [wsUrl, isGameStarted, reconnectAttempt, gameId, playerId]);\n  useEffect(() => {\n    connect();\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, [connect]);\n\n  // Save game state to localStorage whenever relevant state changes\n  useEffect(() => {\n    if (gameId) {\n      LocalStorage.saveGameId(gameId);\n    }\n  }, [gameId]);\n  useEffect(() => {\n    if (playerId) {\n      LocalStorage.savePlayerId(playerId);\n    }\n  }, [playerId]);\n  useEffect(() => {\n    if (gameState) {\n      LocalStorage.saveGameState(gameState);\n    }\n  }, [gameState]);\n  useEffect(() => {\n    LocalStorage.saveIsGameStarted(isGameStarted);\n  }, [isGameStarted]);\n  useEffect(() => {\n    if (players.length > 0) {\n      LocalStorage.savePlayers(players);\n    }\n  }, [players]);\n  const handleMessage = message => {\n    console.log('Processing WebSocket message:', {\n      type: message.type,\n      payload: message.payload,\n      currentPlayerId: playerId,\n      currentGameId: gameId\n    });\n    switch (message.type) {\n      case 'GAME_CREATED':\n        console.log('Game created, setting player ID:', message.payload.playerId);\n        setGameId(message.payload.gameId);\n        setPlayerId(message.payload.playerId);\n        setPlayers([{\n          id: message.payload.playerId,\n          name: message.payload.playerName\n        }]);\n        break;\n      case 'GAME_JOINED':\n        console.log('Game joined, setting player ID and game ID:', {\n          playerId: message.payload.playerId,\n          gameId: message.payload.gameId\n        });\n        setGameId(message.payload.gameId);\n        setPlayerId(message.payload.playerId);\n        setPlayers(message.payload.players);\n        break;\n      case 'PLAYER_JOINED':\n        console.log('Player joined, updating players list and ensuring gameId is set:', {\n          players: message.payload.players,\n          gameId: message.payload.gameId,\n          currentGameId: gameId\n        });\n\n        // Make sure gameId is set if available\n        if (message.payload.gameId && !gameId) {\n          setGameId(message.payload.gameId);\n        }\n        setPlayers(message.payload.players);\n        break;\n      case 'GAME_STARTED':\n        console.log('Game started, current player ID and game ID:', {\n          playerId,\n          gameId: message.payload.gameId || gameId\n        });\n\n        // Ensure gameId is set if available\n        if (message.payload.gameId && !gameId) {\n          setGameId(message.payload.gameId);\n        }\n        setIsGameStarted(true);\n        setGameState(message.payload.gameState);\n        setPlayers(message.payload.players);\n\n        // Ensure we have the correct player ID\n        if (message.payload.playerId) {\n          console.log('Setting player ID from game start:', message.payload.playerId);\n          setPlayerId(message.payload.playerId);\n        }\n        break;\n      case 'GAME_STATE_UPDATED':\n        setGameState(message.payload.gameState);\n\n        // Ensure gameId is set if available\n        if (message.payload.gameId && !gameId) {\n          console.log('Setting gameId from game state update:', message.payload.gameId);\n          setGameId(message.payload.gameId);\n        }\n        break;\n      case 'RECONNECT_SUCCESS':\n        console.log('Reconnection successful:', message.payload);\n\n        // Update all game state with the received data\n        setGameId(message.payload.gameId);\n        setPlayerId(message.payload.playerId);\n        setPlayers(message.payload.players);\n        setIsGameStarted(true);\n        setGameState(message.payload.gameState);\n        break;\n      case 'ERROR':\n        console.error('Server error:', message.payload.message, {\n          currentPlayerId: playerId,\n          currentGameId: gameId\n        });\n        setError(message.payload.message);\n        break;\n      default:\n        console.warn('Unknown message type:', message.type);\n    }\n  };\n  const sendMessage = useCallback((type, payload) => {\n    console.log('Preparing to send message:', {\n      type,\n      payload,\n      currentPlayerId: playerId,\n      currentGameId: gameId\n    });\n    if (!ws) {\n      console.error('No WebSocket instance available');\n      setError('No connection available');\n      return;\n    }\n    if (ws.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket not in OPEN state:', {\n        readyState: ws.readyState,\n        readyStateString: ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'][ws.readyState],\n        isConnected\n      });\n      setError('Connection not ready');\n      return;\n    }\n    try {\n      // We no longer need to add playerId to MAKE_MOVE messages\n      // The server identifies players by their WebSocket connection\n\n      const message = JSON.stringify({\n        type,\n        payload\n      });\n      console.log('Sending WebSocket message:', {\n        type,\n        payload,\n        currentPlayerId: playerId,\n        // for debugging only\n        timestamp: new Date().toISOString()\n      });\n      ws.send(message);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message');\n    }\n  }, [ws, isConnected, playerId, gameId]);\n  return {\n    sendMessage,\n    gameId,\n    error,\n    isConnected,\n    players,\n    isGameStarted,\n    gameState,\n    playerId\n  };\n};\n_s(useWebSocket, \"0ebvoTHt69A1sTxSaFuHKc3OMgA=\");","map":{"version":3,"names":["useState","useEffect","useCallback","LocalStorage","getWebSocketUrl","process","env","NODE_ENV","protocol","window","location","host","useWebSocket","url","_s","wsUrl","ws","setWs","isConnected","setIsConnected","gameId","setGameId","getGameId","error","setError","players","setPlayers","getPlayers","isGameStarted","setIsGameStarted","getIsGameStarted","gameState","setGameState","getGameState","playerId","setPlayerId","getPlayerId","reconnectAttempt","setReconnectAttempt","connect","console","log","existingGameId","existingPlayerId","websocket","WebSocket","onopen","message","JSON","stringify","type","payload","send","onclose","event","attempt","setTimeout","prev","onerror","onmessage","parse","data","timestamp","Date","toISOString","handleMessage","close","saveGameId","savePlayerId","saveGameState","saveIsGameStarted","length","savePlayers","currentPlayerId","currentGameId","id","name","playerName","warn","sendMessage","readyState","OPEN","readyStateString"],"sources":["/Users/samjain/seq/sequence/src/hooks/useWebSocket.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { WebSocketMessage } from '../server/types';\nimport { GameState } from '../models/types';\nimport * as LocalStorage from '../utils/localStorage';\n\n// Function to get the correct WebSocket URL based on environment\nexport const getWebSocketUrl = (): string => {\n  // For local development\n  if (process.env.NODE_ENV === 'development') {\n    return 'ws://localhost:3001/ws';\n  }\n  \n  // For production (Vercel)\n  const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n  return `${protocol}://${window.location.host}/ws`;\n};\n\ninterface UseWebSocketReturn {\n  sendMessage: (type: string, payload: any) => void;\n  gameId: string | null;\n  error: string | null;\n  isConnected: boolean;\n  players: { id: string; name: string }[];\n  isGameStarted: boolean;\n  gameState: GameState | null;\n  playerId: string | null;\n}\n\nexport const useWebSocket = (url?: string): UseWebSocketReturn => {\n  // Use provided URL or get the default one based on environment\n  const wsUrl = url || getWebSocketUrl();\n  const [ws, setWs] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [gameId, setGameId] = useState<string | null>(() => LocalStorage.getGameId());\n  const [error, setError] = useState<string | null>(null);\n  const [players, setPlayers] = useState<{ id: string; name: string }[]>(() => LocalStorage.getPlayers() || []);\n  const [isGameStarted, setIsGameStarted] = useState<boolean>(() => LocalStorage.getIsGameStarted());\n  const [gameState, setGameState] = useState<GameState | null>(() => LocalStorage.getGameState());\n  const [playerId, setPlayerId] = useState<string | null>(() => LocalStorage.getPlayerId());\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n\n  const connect = useCallback(() => {\n    try {\n      console.log('Attempting to connect to WebSocket server...', {\n        existingGameId: gameId,\n        existingPlayerId: playerId,\n        isGameStarted\n      });\n      \n      const websocket = new WebSocket(wsUrl);\n\n      websocket.onopen = () => {\n        console.log('WebSocket connection established');\n        setIsConnected(true);\n        setError(null);\n        setReconnectAttempt(0);\n        \n        // If we have a gameId and playerId, attempt to reconnect to the game\n        if (gameId && playerId && isGameStarted) {\n          console.log('Attempting to reconnect to existing game:', {\n            gameId,\n            playerId\n          });\n          \n          // Send a reconnect message to the server\n          const message = JSON.stringify({\n            type: 'RECONNECT',\n            payload: {\n              gameId,\n              playerId\n            }\n          });\n          websocket.send(message);\n        }\n      };\n\n      websocket.onclose = (event) => {\n        console.log('WebSocket connection closed:', event);\n        setIsConnected(false);\n        \n        // Attempt to reconnect if the game is in progress\n        if (isGameStarted && reconnectAttempt < 3) {\n          console.log('Attempting to reconnect...', { attempt: reconnectAttempt + 1 });\n          setTimeout(() => {\n            setReconnectAttempt(prev => prev + 1);\n            connect();\n          }, 1000 * (reconnectAttempt + 1)); // Exponential backoff\n        }\n      };\n\n      websocket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setError('Failed to connect to server');\n      };\n\n      websocket.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          console.log('WebSocket received message:', {\n            type: message.type,\n            payload: message.payload,\n            timestamp: new Date().toISOString()\n          });\n          handleMessage(message);\n        } catch (error) {\n          console.error('Error handling message:', error);\n        }\n      };\n\n      setWs(websocket);\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n      setError('Failed to create WebSocket connection');\n    }\n  }, [wsUrl, isGameStarted, reconnectAttempt, gameId, playerId]);\n\n  useEffect(() => {\n    connect();\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, [connect]);\n\n  // Save game state to localStorage whenever relevant state changes\n  useEffect(() => {\n    if (gameId) {\n      LocalStorage.saveGameId(gameId);\n    }\n  }, [gameId]);\n\n  useEffect(() => {\n    if (playerId) {\n      LocalStorage.savePlayerId(playerId);\n    }\n  }, [playerId]);\n\n  useEffect(() => {\n    if (gameState) {\n      LocalStorage.saveGameState(gameState);\n    }\n  }, [gameState]);\n\n  useEffect(() => {\n    LocalStorage.saveIsGameStarted(isGameStarted);\n  }, [isGameStarted]);\n\n  useEffect(() => {\n    if (players.length > 0) {\n      LocalStorage.savePlayers(players);\n    }\n  }, [players]);\n\n  const handleMessage = (message: WebSocketMessage) => {\n    console.log('Processing WebSocket message:', {\n      type: message.type,\n      payload: message.payload,\n      currentPlayerId: playerId,\n      currentGameId: gameId\n    });\n    \n    switch (message.type) {\n      case 'GAME_CREATED':\n        console.log('Game created, setting player ID:', message.payload.playerId);\n        setGameId(message.payload.gameId);\n        setPlayerId(message.payload.playerId);\n        setPlayers([{ id: message.payload.playerId, name: message.payload.playerName }]);\n        break;\n\n      case 'GAME_JOINED':\n        console.log('Game joined, setting player ID and game ID:', {\n          playerId: message.payload.playerId,\n          gameId: message.payload.gameId\n        });\n        setGameId(message.payload.gameId);\n        setPlayerId(message.payload.playerId);\n        setPlayers(message.payload.players);\n        break;\n\n      case 'PLAYER_JOINED':\n        console.log('Player joined, updating players list and ensuring gameId is set:', {\n          players: message.payload.players,\n          gameId: message.payload.gameId,\n          currentGameId: gameId\n        });\n        \n        // Make sure gameId is set if available\n        if (message.payload.gameId && !gameId) {\n          setGameId(message.payload.gameId);\n        }\n        \n        setPlayers(message.payload.players);\n        break;\n\n      case 'GAME_STARTED':\n        console.log('Game started, current player ID and game ID:', {\n          playerId,\n          gameId: message.payload.gameId || gameId\n        });\n        \n        // Ensure gameId is set if available\n        if (message.payload.gameId && !gameId) {\n          setGameId(message.payload.gameId);\n        }\n        \n        setIsGameStarted(true);\n        setGameState(message.payload.gameState);\n        setPlayers(message.payload.players);\n        \n        // Ensure we have the correct player ID\n        if (message.payload.playerId) {\n          console.log('Setting player ID from game start:', message.payload.playerId);\n          setPlayerId(message.payload.playerId);\n        }\n        break;\n\n      case 'GAME_STATE_UPDATED':\n        setGameState(message.payload.gameState);\n        \n        // Ensure gameId is set if available\n        if (message.payload.gameId && !gameId) {\n          console.log('Setting gameId from game state update:', message.payload.gameId);\n          setGameId(message.payload.gameId);\n        }\n        break;\n\n      case 'RECONNECT_SUCCESS':\n        console.log('Reconnection successful:', message.payload);\n        \n        // Update all game state with the received data\n        setGameId(message.payload.gameId);\n        setPlayerId(message.payload.playerId);\n        setPlayers(message.payload.players);\n        setIsGameStarted(true);\n        setGameState(message.payload.gameState);\n        break;\n\n      case 'ERROR':\n        console.error('Server error:', message.payload.message, {\n          currentPlayerId: playerId,\n          currentGameId: gameId\n        });\n        setError(message.payload.message);\n        break;\n\n      default:\n        console.warn('Unknown message type:', message.type);\n    }\n  };\n\n  const sendMessage = useCallback((type: string, payload: any) => {\n    console.log('Preparing to send message:', { \n      type, \n      payload,\n      currentPlayerId: playerId,\n      currentGameId: gameId\n    });\n    \n    if (!ws) {\n      console.error('No WebSocket instance available');\n      setError('No connection available');\n      return;\n    }\n\n    if (ws.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket not in OPEN state:', {\n        readyState: ws.readyState,\n        readyStateString: ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'][ws.readyState],\n        isConnected\n      });\n      setError('Connection not ready');\n      return;\n    }\n\n    try {\n      // We no longer need to add playerId to MAKE_MOVE messages\n      // The server identifies players by their WebSocket connection\n      \n      const message = JSON.stringify({ type, payload });\n      console.log('Sending WebSocket message:', {\n        type,\n        payload,\n        currentPlayerId: playerId, // for debugging only\n        timestamp: new Date().toISOString()\n      });\n      ws.send(message);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message');\n    }\n  }, [ws, isConnected, playerId, gameId]);\n\n  return {\n    sendMessage,\n    gameId,\n    error,\n    isConnected,\n    players,\n    isGameStarted,\n    gameState,\n    playerId\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}