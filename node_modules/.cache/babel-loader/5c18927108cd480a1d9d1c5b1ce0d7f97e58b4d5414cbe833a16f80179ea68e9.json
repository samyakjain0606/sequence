{"ast":null,"code":"// Keys for localStorage\nconst STORAGE_KEYS = {\n  GAME_ID: 'sequence_game_id',\n  PLAYER_ID: 'sequence_player_id',\n  PLAYER_NAME: 'sequence_player_name',\n  GAME_STATE: 'sequence_game_state',\n  IS_GAME_STARTED: 'sequence_game_started',\n  PLAYERS: 'sequence_players'\n};\n\n// Save game ID to localStorage\nexport const saveGameId = gameId => {\n  localStorage.setItem(STORAGE_KEYS.GAME_ID, gameId);\n};\n\n// Get game ID from localStorage\nexport const getGameId = () => {\n  return localStorage.getItem(STORAGE_KEYS.GAME_ID);\n};\n\n// Save player ID to localStorage\nexport const savePlayerId = playerId => {\n  localStorage.setItem(STORAGE_KEYS.PLAYER_ID, playerId);\n};\n\n// Get player ID from localStorage\nexport const getPlayerId = () => {\n  return localStorage.getItem(STORAGE_KEYS.PLAYER_ID);\n};\n\n// Save player name to localStorage\nexport const savePlayerName = playerName => {\n  localStorage.setItem(STORAGE_KEYS.PLAYER_NAME, playerName);\n};\n\n// Get player name from localStorage\nexport const getPlayerName = () => {\n  return localStorage.getItem(STORAGE_KEYS.PLAYER_NAME);\n};\n\n// Save game state to localStorage\nexport const saveGameState = gameState => {\n  localStorage.setItem(STORAGE_KEYS.GAME_STATE, JSON.stringify(gameState));\n};\n\n// Get game state from localStorage\nexport const getGameState = () => {\n  const gameStateStr = localStorage.getItem(STORAGE_KEYS.GAME_STATE);\n  if (!gameStateStr) return null;\n  try {\n    return JSON.parse(gameStateStr);\n  } catch (error) {\n    console.error('Error parsing game state from localStorage:', error);\n    return null;\n  }\n};\n\n// Save isGameStarted state to localStorage\nexport const saveIsGameStarted = isStarted => {\n  localStorage.setItem(STORAGE_KEYS.IS_GAME_STARTED, isStarted ? 'true' : 'false');\n};\n\n// Get isGameStarted state from localStorage\nexport const getIsGameStarted = () => {\n  return localStorage.getItem(STORAGE_KEYS.IS_GAME_STARTED) === 'true';\n};\n\n// Save players to localStorage\nexport const savePlayers = players => {\n  localStorage.setItem(STORAGE_KEYS.PLAYERS, JSON.stringify(players));\n};\n\n// Get players from localStorage\nexport const getPlayers = () => {\n  const playersStr = localStorage.getItem(STORAGE_KEYS.PLAYERS);\n  if (!playersStr) return null;\n  try {\n    return JSON.parse(playersStr);\n  } catch (error) {\n    console.error('Error parsing players from localStorage:', error);\n    return null;\n  }\n};\n\n// Clear all game data from localStorage\nexport const clearGameData = () => {\n  localStorage.removeItem(STORAGE_KEYS.GAME_ID);\n  localStorage.removeItem(STORAGE_KEYS.PLAYER_ID);\n  localStorage.removeItem(STORAGE_KEYS.PLAYER_NAME);\n  localStorage.removeItem(STORAGE_KEYS.GAME_STATE);\n  localStorage.removeItem(STORAGE_KEYS.IS_GAME_STARTED);\n  localStorage.removeItem(STORAGE_KEYS.PLAYERS);\n};","map":{"version":3,"names":["STORAGE_KEYS","GAME_ID","PLAYER_ID","PLAYER_NAME","GAME_STATE","IS_GAME_STARTED","PLAYERS","saveGameId","gameId","localStorage","setItem","getGameId","getItem","savePlayerId","playerId","getPlayerId","savePlayerName","playerName","getPlayerName","saveGameState","gameState","JSON","stringify","getGameState","gameStateStr","parse","error","console","saveIsGameStarted","isStarted","getIsGameStarted","savePlayers","players","getPlayers","playersStr","clearGameData","removeItem"],"sources":["/Users/samjain/seq/sequence/src/utils/localStorage.ts"],"sourcesContent":["import { GameState } from '../models/types';\n\n// Keys for localStorage\nconst STORAGE_KEYS = {\n  GAME_ID: 'sequence_game_id',\n  PLAYER_ID: 'sequence_player_id',\n  PLAYER_NAME: 'sequence_player_name',\n  GAME_STATE: 'sequence_game_state',\n  IS_GAME_STARTED: 'sequence_game_started',\n  PLAYERS: 'sequence_players'\n};\n\n// Save game ID to localStorage\nexport const saveGameId = (gameId: string): void => {\n  localStorage.setItem(STORAGE_KEYS.GAME_ID, gameId);\n};\n\n// Get game ID from localStorage\nexport const getGameId = (): string | null => {\n  return localStorage.getItem(STORAGE_KEYS.GAME_ID);\n};\n\n// Save player ID to localStorage\nexport const savePlayerId = (playerId: string): void => {\n  localStorage.setItem(STORAGE_KEYS.PLAYER_ID, playerId);\n};\n\n// Get player ID from localStorage\nexport const getPlayerId = (): string | null => {\n  return localStorage.getItem(STORAGE_KEYS.PLAYER_ID);\n};\n\n// Save player name to localStorage\nexport const savePlayerName = (playerName: string): void => {\n  localStorage.setItem(STORAGE_KEYS.PLAYER_NAME, playerName);\n};\n\n// Get player name from localStorage\nexport const getPlayerName = (): string | null => {\n  return localStorage.getItem(STORAGE_KEYS.PLAYER_NAME);\n};\n\n// Save game state to localStorage\nexport const saveGameState = (gameState: GameState): void => {\n  localStorage.setItem(STORAGE_KEYS.GAME_STATE, JSON.stringify(gameState));\n};\n\n// Get game state from localStorage\nexport const getGameState = (): GameState | null => {\n  const gameStateStr = localStorage.getItem(STORAGE_KEYS.GAME_STATE);\n  if (!gameStateStr) return null;\n  \n  try {\n    return JSON.parse(gameStateStr) as GameState;\n  } catch (error) {\n    console.error('Error parsing game state from localStorage:', error);\n    return null;\n  }\n};\n\n// Save isGameStarted state to localStorage\nexport const saveIsGameStarted = (isStarted: boolean): void => {\n  localStorage.setItem(STORAGE_KEYS.IS_GAME_STARTED, isStarted ? 'true' : 'false');\n};\n\n// Get isGameStarted state from localStorage\nexport const getIsGameStarted = (): boolean => {\n  return localStorage.getItem(STORAGE_KEYS.IS_GAME_STARTED) === 'true';\n};\n\n// Save players to localStorage\nexport const savePlayers = (players: { id: string; name: string }[]): void => {\n  localStorage.setItem(STORAGE_KEYS.PLAYERS, JSON.stringify(players));\n};\n\n// Get players from localStorage\nexport const getPlayers = (): { id: string; name: string }[] | null => {\n  const playersStr = localStorage.getItem(STORAGE_KEYS.PLAYERS);\n  if (!playersStr) return null;\n  \n  try {\n    return JSON.parse(playersStr) as { id: string; name: string }[];\n  } catch (error) {\n    console.error('Error parsing players from localStorage:', error);\n    return null;\n  }\n};\n\n// Clear all game data from localStorage\nexport const clearGameData = (): void => {\n  localStorage.removeItem(STORAGE_KEYS.GAME_ID);\n  localStorage.removeItem(STORAGE_KEYS.PLAYER_ID);\n  localStorage.removeItem(STORAGE_KEYS.PLAYER_NAME);\n  localStorage.removeItem(STORAGE_KEYS.GAME_STATE);\n  localStorage.removeItem(STORAGE_KEYS.IS_GAME_STARTED);\n  localStorage.removeItem(STORAGE_KEYS.PLAYERS);\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}