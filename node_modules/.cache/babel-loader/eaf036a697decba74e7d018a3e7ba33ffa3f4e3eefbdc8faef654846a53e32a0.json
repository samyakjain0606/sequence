{"ast":null,"code":"// Card suit enum\n// Card rank enum\n// Card interface\n// Player/team token enum\nexport let TokenType=/*#__PURE__*/function(TokenType){TokenType[\"NONE\"]=\"none\";TokenType[\"PLAYER1\"]=\"player1\";TokenType[\"PLAYER2\"]=\"player2\";return TokenType;}({});// Board space interface\n// Board interface (10x10 grid)\n// Game state interface\n// Player interface","map":{"version":3,"names":["TokenType"],"sources":["/Users/samjain/seq/sequence/src/models/types.ts"],"sourcesContent":["// Card suit enum\nexport type Suit = 'spades' | 'hearts' | 'diamonds' | 'clubs';\n\n// Card rank enum\nexport type Rank = '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | 'J' | 'Q' | 'K' | 'A';\n\n// Card interface\nexport interface Card {\n  suit: Suit;\n  rank: Rank;\n  isOneEyedJack: boolean; // One-eyed jacks (Hearts, Spades) can remove opponent's tokens\n  isTwoEyedJack: boolean; // Two-eyed jacks (Diamonds, Clubs) are wild cards\n}\n\n// Player/team token enum\nexport enum TokenType {\n  NONE = 'none',\n  PLAYER1 = 'player1',\n  PLAYER2 = 'player2'\n}\n\n// Board space interface\nexport interface BoardSpace {\n  card: Card | null; // null for corner spaces\n  token: TokenType;\n  isCorner: boolean; // Free spaces in the corners\n}\n\n// Board interface (10x10 grid)\nexport type Board = BoardSpace[][];\n\n// Game state interface\nexport interface GameState {\n  board: Board;\n  currentTurn: number; // Player index\n  players: Player[];\n  deck: Card[];\n}\n\n// Player interface\nexport interface Player {\n  id: string;\n  name: string;\n  tokenType: TokenType;\n  hand: Card[];\n}\n\nexport interface Position {\n  row: number;\n  col: number;\n} "],"mappings":"AAAA;AAGA;AAGA;AAQA;AACA,UAAY,CAAAA,SAAS,uBAATA,SAAS,EAATA,SAAS,gBAATA,SAAS,sBAATA,SAAS,4BAAT,CAAAA,SAAS,OAMrB;AAOA;AAGA;AAQA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}